@model HackathonWeb.Models.RequestDetailsViewModel

@{
    ViewBag.Title = "Index";
}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWCBVvWmrJuRCEBowcwMXD3mbPGPhU-N0"
        type="text/javascript"></script>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

<h3 class="text-center text-danger"> Coming Request!! </h3>

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div id="googleMap" style="height:500px;width:100%;"></div>

        </div>

        <div class="col-md-4" style="background-color:#def">

            <div class="bs-component" style="margin-bottom: 5px;">
                <span class="badge badge-info">@Html.DisplayFor(model => model.RequestStatus)</span>
                @if (Model.Type == "AutoL")
                {
                    <span class="badge badge-warning">Auto | Low Priority</span>
                }
                else if (Model.Type == "AutoH")
                {
                    <span class="badge badge-danger">Auto | High Priority</span>
                }
                else if (Model.Type == "Manual")
                {
                    <span class="badge badge-warning">@Html.DisplayFor(model => model.Type)</span>
                }
                else
                {
                    <span class="badge badge-danger">@Html.DisplayFor(model => model.Type)</span>
                }
            </div>

            <h3 class="pb-3 align-left mbr-fonts-style ">
                @Html.DisplayFor(model => model.Comment)
            </h3>

            @*<h4 class="pb-3 align-left mbr-fonts-style ">
                    @Html.DisplayFor(model => model.GPS)
                </h4>*@


            <div class="card border-dark mb-3" style="max-width: 20rem;">
                <div class="card-header">Vital Signs</div>
                <div class="card-body">
                    <p class="card-text">
                        Pulse:
                        @Html.DisplayFor(model => model.VitalSignA)
                    </p>

                    <p class="card-text">
                        ACC:
                        @Html.DisplayFor(model => model.VitalSignB)
                    </p>
                </div>
            </div>
            @if (Model.DiseaseA || Model.DiseaseB || Model.DiseaseC)
            {
                <div class="card border-dark mb-3" style="max-width: 20rem;">
                    <div class="card-header">Patient Diseases</div>
                    <div class="card-body">
                        @if (Model.DiseaseA)
                        {
                            <p class="card-text">
                                @Html.DisplayFor(model => model.DiseaseA)
                                Diabetes
                            </p>

                        }

                        @if (Model.DiseaseB)
                        {
                            <p class="card-text">
                                @Html.DisplayFor(model => model.DiseaseB)
                                Blood pressure
                            </p>
                        }
                        @if (Model.DiseaseC)
                        {

                            <p class="card-text">
                                @Html.DisplayFor(model => model.DiseaseC)
                                Epilepsy
                            </p>
                        }
                    </div>
                </div>
            }


            @if (Model.ParamedicName != null && Model.ParamedicName != "")
            {

                <p class="mbr-text align-left mbr-fonts-style display-7">

                    By:   @Html.DisplayFor(model => model.ParamedicName)
                </p>
            }
            <p class="mbr-text align-left mbr-fonts-style display-7">
                On:   @Html.DisplayFor(model => model.CreateDateTime)
            </p>

            @if (Model.RequestStatus == "Waiting" || Model.RequestStatus == "Escalated")
            {
                    <p class="bs-component text-center">
                @Html.ActionLink("Accept", "Accept", new { id = Model.RequestID }, new { @class = "btn btn-primary col-3", width = "50px" })
                &nbsp;
                &nbsp;
              &nbsp;
                  @Html.ActionLink("Reject", "Reject", new { id = Model.RequestID }, new { @class = "btn btn-danger col-3", width = "50px" })
            </p>
            }
            else if (Model.RequestStatus == "Accepted" )
                {
                <p class="bs-component text-center">
                    @Html.ActionLink("Evaluate", "Evaluate", new { id = Model.RequestID }, new { @class = "btn btn-primary col-3", width = "50px" })
                    &nbsp;
                    @Html.ActionLink("Escalate", "Escalate", new { id = Model.RequestID }, new { @class = "btn btn-warning col-3", width = "50px" })
                    &nbsp;
                    @Html.ActionLink("Cancel", "Cancel", new { id = Model.RequestID }, new { @class = "btn btn-danger col-3", width = "50px" })
                </p>
            }
        </div>
    </div>
</div>


<script>

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success);
        } else {
            alert("There is Some Problem on your current browser to get Geo Location!");
        }

        var myCenter;
        var duration = 0;
        function success(position) {

            var markerArray = [];

            // Instantiate a directions service.
            var directionsService = new google.maps.DirectionsService;

             myCenter = new google.maps.LatLng(@Model.GPS );
            var mapProp = { center: myCenter, zoom: 12, scrollwheel: false, draggable: true, mapTypeId: google.maps.MapTypeId.ROADMAP };
            var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

            var lat = 21.4246798;
            var long = 39.93356912;

            //var lat = position.coords.latitude;
            //var long = position.coords.longitude;
            var city = position.coords.locality;
            var LatLng = new google.maps.LatLng(lat, long);
            //var mapOptions = {
            //    center: LatLng,
            //    zoom: 12,
            //    mapTypeId: google.maps.MapTypeId.ROADMAP
            //};

           // var map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);

            var marker2 = new google.maps.Marker({ position: myCenter });
           // marker2.setMap(map);

            var marker = new google.maps.Marker({
                position: LatLng,
                title: "<div style = 'height:60px;width:200px'><b>Your location:</b><br />Latitude: "
                            + lat + +"<br />Longitude: " + long
            });

            markerArray[0]=marker2;
            markerArray[1]=marker;

           // marker.setMap(map);

            var bounds = new google.maps.LatLngBounds();
                bounds.extend(marker.getPosition());
                bounds.extend(marker2.getPosition());
            map.fitBounds(bounds);


            // Instantiate a directions service.
            var directionsService = new google.maps.DirectionsService;
            // Create a renderer for directions and bind it to the map.
            var directionsDisplay = new google.maps.DirectionsRenderer({ map: map });
            // Display the route between the initial start and end selections.
            var stepDisplay = new google.maps.InfoWindow;

            calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, stepDisplay, map);


            var getInfoWindow = new google.maps.InfoWindow({
                content: "<b>Your Location"//</b><br/> Latitude:" + lat + "<br /> Longitude:" + long + " "
            });
            getInfoWindow.open(map, marker);
            //var myMarker1 = new google.maps.Marker({
            //    position: new google.maps.LatLng(21.42282004, 39.93030363),
            //    map: map, icon: '/Hajj-Hackathon-Cover.jpg'
            //});
        }

        function calculateAndDisplayRoute(directionsDisplay, directionsService,
        markerArray, stepDisplay, map) {

            // Retrieve the start and end locations and create a DirectionsRequest using
            // WALKING directions.
            directionsService.route({
                origin: markerArray[1].position,
                destination: markerArray[0].position,
                travelMode: 'DRIVING',
                drivingOptions: {
                    departureTime: new Date(Date.now() + 1000),  // for the time N milliseconds from now.
                    trafficModel: 'optimistic'
                }

            }, function (response, status) {
                // Route the directions and pass the response to a function to create
                // markers for each step.
                //duration = response.routes[0].legs[0].duration;
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    showSteps(response, markerArray, stepDisplay, map);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });


        }


        function showSteps(directionResult, markerArray, stepDisplay, map) {
            // For each step, place a marker, and add the text to the marker's infowindow.
            // Also attach the marker to an array so we can keep track of it and remove it
            // when calculating new routes.
            var myRoute = directionResult.routes[0].legs[0];
            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
               // marker.setMap(map);
                marker.setPosition(myRoute.steps[i].start_location);
                //////attachInstructionText(
                //////    stepDisplay, marker, myRoute.steps[i].instructions, map);
            }
            
        }


        //function getTotalDuration(directionsDisplay) {
        //    var directionsResult = directionsDisplay.getDirections();
        //    var route = directionsResult.routes[0];
        //    var totalDuration = 0;
        //    var legs = route.legs;
        //    for (var i = 0; i < legs.length; ++i) {
        //        totalDuration += legs[i].duration.value;
        //    }
        //    return totalDuration;
        //}

</script>